/* Auto-generated by genmsg_cpp for file /home/dereck/aiproj/p2os/p2os_driver/msg/SonarState.msg */
#ifndef P2OS_DRIVER_MESSAGE_SONARSTATE_H
#define P2OS_DRIVER_MESSAGE_SONARSTATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace p2os_driver
{
template <class ContainerAllocator>
struct SonarState_ {
  typedef SonarState_<ContainerAllocator> Type;

  SonarState_()
  : array_power(false)
  {
  }

  SonarState_(const ContainerAllocator& _alloc)
  : array_power(false)
  {
  }

  typedef uint8_t _array_power_type;
  uint8_t array_power;


  typedef boost::shared_ptr< ::p2os_driver::SonarState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::p2os_driver::SonarState_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SonarState
typedef  ::p2os_driver::SonarState_<std::allocator<void> > SonarState;

typedef boost::shared_ptr< ::p2os_driver::SonarState> SonarStatePtr;
typedef boost::shared_ptr< ::p2os_driver::SonarState const> SonarStateConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::p2os_driver::SonarState_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::p2os_driver::SonarState_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace p2os_driver

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::p2os_driver::SonarState_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::p2os_driver::SonarState_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::p2os_driver::SonarState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f2ce4939f8f3dfc676d65cd5efeee830";
  }

  static const char* value(const  ::p2os_driver::SonarState_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf2ce4939f8f3dfc6ULL;
  static const uint64_t static_value2 = 0x76d65cd5efeee830ULL;
};

template<class ContainerAllocator>
struct DataType< ::p2os_driver::SonarState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "p2os_driver/SonarState";
  }

  static const char* value(const  ::p2os_driver::SonarState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::p2os_driver::SonarState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool array_power\n\
\n\
";
  }

  static const char* value(const  ::p2os_driver::SonarState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::p2os_driver::SonarState_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::p2os_driver::SonarState_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.array_power);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SonarState_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::p2os_driver::SonarState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::p2os_driver::SonarState_<ContainerAllocator> & v) 
  {
    s << indent << "array_power: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.array_power);
  }
};


} // namespace message_operations
} // namespace ros

#endif // P2OS_DRIVER_MESSAGE_SONARSTATE_H

